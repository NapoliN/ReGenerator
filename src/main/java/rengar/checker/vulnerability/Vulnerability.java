package rengar.checker.vulnerability;

import rengar.checker.attack.AttackString;
import rengar.checker.pattern.DisturbFreePattern;
import rengar.checker.pattern.POAPattern;
import rengar.checker.pattern.ReDoSPattern;
import rengar.parser.ast.BranchExpr;
import rengar.parser.ast.Expr;
import rengar.parser.ast.LoopExpr;
import rengar.parser.ast.SequenceExpr;

// 脆弱性に対応するattackableノードと、攻撃の生成に成功したattack stringを管理するクラス
public class Vulnerability {
    private final POAPattern pattern;
    private final AttackString attackString;

    public Vulnerability(POAPattern pattern,AttackString attackString) {
        this.pattern = pattern;
        this.attackString = attackString;
    }

    public POAPattern getReDoSPattern() {
        return pattern;
    }

    public AttackString getAttackString() {
        return attackString;
    }

    private enum Comparator {
        PRECEED,
        EQUAL,
        FOLLOW,
        CONTAIN,
        CONTAINED,
        Uncomparable;
    }

    private static Comparator compare(Vulnerability vuln1, Vulnerability vuln2){
        // 基になる正規表現は両者とも等しい
        Expr baseExpr = vuln1.getReDoSPattern().getExpr();
        
        POAPattern poa1 = vuln1.getReDoSPattern();
        POAPattern poa2 = vuln2.getReDoSPattern();

        LoopExpr pre1 = poa1.getPreLoopExpr();
        SequenceExpr med1 = poa1.getMiddleSequenceExpr();
        LoopExpr post1 = poa2.getPostLoopExpr();
        
        LoopExpr pre2 = poa2.getPreLoopExpr();
        SequenceExpr med2 = poa2.getMiddleSequenceExpr();
        LoopExpr post2 = poa2.getPostLoopExpr();

        Expr commonAncestor = Expr.getCommonAncestorExpr(med1, med2);
        if (commonAncestor instanceof BranchExpr){
            return Comparator.Uncomparable;
        }
        else if (commonAncestor instanceof SequenceExpr){
            boolean is1Preceed = med1.getExprId() < med2.getExprId();

            return is1Preceed ? Comparator.PRECEED : Comparator.FOLLOW;
        }
        
        //vuln1.getReDoSPattern().getAttackableExpr()
        return Comparator.EQUAL;
    }
}