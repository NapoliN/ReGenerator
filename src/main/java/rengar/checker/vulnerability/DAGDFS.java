package rengar.checker.vulnerability;

import java.util.*;

/**
 * 有向非巡回グラフの探索を行うクラス
 */
public class DAGDFS {
    private DAG dag;
    private Set<Integer> visited;
    private List<Integer>[] longestPaths;
    private Map<Integer, List<Integer>> graph;

    int[] maxDepth;

    public DAGDFS(DAG dag) {
        this.dag = dag;
        this.graph = dag.getAdjList();
        this.visited = new HashSet<>();
        var size = graph.size();
        this.longestPaths = new List[size];
    }

    // DFSで最大の増加列を探索し、経路を記録する
    public List<Integer> dfs(int node) {
        if (visited.contains(node)) {
            return longestPaths[node];
        }

        visited.add(node);

        List<Integer> maxPath = new ArrayList<>();
        maxPath.add(node); // 自分自身を含める

        for (int neighbor : graph.get(node)) {
            List<Integer> pathFromNeighbor = dfs(neighbor);
            // 隣接ノードからの経路が現在の経路よりも長い場合、更新する
            if (pathFromNeighbor.size() + 1 > maxPath.size()) {
                maxPath = new ArrayList<>(pathFromNeighbor);
                maxPath.add(0, node); // 経路の最初に現在のノードを追加
            }
        }

        longestPaths[node] = maxPath;
        return maxPath;
    }

    public List<Integer> findLongestIncreasingSequence() {
        List<Integer> maxPath = new ArrayList<>();

        for (int i = 0; i < graph.size(); i++) {
            List<Integer> path = dfs(i);
            if (path.size() > maxPath.size()) {
                maxPath = path;
            }
        }

        return maxPath;
    }
}
