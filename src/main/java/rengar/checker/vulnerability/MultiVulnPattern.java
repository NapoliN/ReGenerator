package rengar.checker.vulnerability;

import java.util.*;

import rengar.generator.StringGenerator;
import rengar.parser.charutil.CharUtil;
import rengar.checker.attack.AttackString;
import rengar.parser.ast.*;

public class MultiVulnPattern {
    private final RegexExpr expr;
    private final List<Vulnerability> vulnerabilities;
    private final List<Expr> connectExprs;
    private MultiVulnAttackString multAttackString;

    public MultiVulnPattern(RegexExpr expr, List<Vulnerability> vulnerabilities) {
        this.expr = expr;
        this.vulnerabilities = vulnerabilities;
        this.connectExprs = new ArrayList<>();
        this.multAttackString = new MultiVulnAttackString();
        analyse();
    }

    public void analyse() throws IndexOutOfBoundsException{
        if (vulnerabilities.size() == 0){
            return;
        }

        for (int i=0;i<vulnerabilities.size()-1; i++){
            Vulnerability vuln1 = vulnerabilities.get(i);
            Vulnerability vuln2 = vulnerabilities.get(i+1);
            LoopExpr vulnExpr1 = vuln1.getReDoSPattern().getPostLoopExpr();
            LoopExpr vulnExpr2 = vuln2.getReDoSPattern().getPreLoopExpr();
            AttackString attack2 = vuln2.getAttackString();

            //System.out.printf("%d %d\n", vulnExpr1.getExprId(), vulnExpr2.getExprId());
            //System.out.printf("%d -> %d\n", vuln1.getID(), vuln2.getID());
            Expr ancestor = expr.getCommonAncestor(vulnExpr1.getExprId(), vulnExpr2.getExprId());
            if (ancestor instanceof LoopExpr){
                this.connectExprs.add(null);
                //System.out.println("directly connected");
            }
            else{
                ConnectConstructor dfs = new ConnectConstructor(ancestor);
                Expr connect = dfs.extractComplementalTreeExpr(vulnExpr1, vulnExpr2);
                this.connectExprs.add(connect);
            }
        }    
        
        AttackString attack1 = vulnerabilities.get(0).getAttackString();
        AttackString fstAttack = new AttackString();
        fstAttack.setAttack(attack1.getAttack());
        fstAttack.setN(attack1.getN());
        fstAttack.setPrefix(attack1.getPrefix());
        multAttackString.AddAttackString(fstAttack);
        for (int i=1;i<vulnerabilities.size();i++){
            Vulnerability vuln = vulnerabilities.get(i);
            AttackString attack = vuln.getAttackString();
            AttackString tmp = new AttackString();
            tmp.setAttack(attack.getAttack());
            tmp.setN(attack.getN());

            Expr connectExpr = this.connectExprs.get(i-1);
            if (connectExpr != null){
                tmp.setPrefix(StringGenerator.quickGen(connectExpr).genValue());
            }
            multAttackString.AddAttackString(tmp);
        }
        multAttackString.setPostfix(vulnerabilities.get(vulnerabilities.size()-1).getAttackString().getPostfix());
        multAttackString.adjustmentNs();
    }

    public MultiVulnAttackString getMultiVulnAttackString(){
        return multAttackString;
    }
}
